<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Muthu Mani</title>
    <link>https://mmblack4.github.io/mynotes/</link>
    <description>Recent content on Muthu Mani</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 12 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://mmblack4.github.io/mynotes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Indexing Arrays</title>
      <link>https://mmblack4.github.io/mynotes/python/numpy/indexing-array/</link>
      <pubDate>Wed, 12 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mmblack4.github.io/mynotes/python/numpy/indexing-array/</guid>
      <description>import numpy as np creating array range 0 to 11 arr = np.arange(0, 11) arr array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])  array index of 8 arr[8] 8  get by range 1 to 5 arr[1:5] array([1, 2, 3, 4])  arr[0:5] array([0, 1, 2, 3, 4])  set value for range arr[0:5] = 100arr array([100, 100, 100, 100, 100, 5, 6, 7, 8, 9, 10])  # slice_of_arr = arr[0:5]slice_of_arr array([100, 100, 100, 100, 100])  Index 2D array arr2d = np.</description>
    </item>
    
    <item>
      <title>Universal Array Functions</title>
      <link>https://mmblack4.github.io/mynotes/python/numpy/universal-array-functions/</link>
      <pubDate>Wed, 12 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mmblack4.github.io/mynotes/python/numpy/universal-array-functions/</guid>
      <description>import numpy as nparr = np.arange(11) arr array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])  squer root np.sqrt(arr) array([0. , 1. , 1.41421356, 1.73205081, 2. , 2.23606798, 2.44948974, 2.64575131, 2.82842712, 3. , 3.16227766])  expt np.exp(arr) array([1.00000000e+00, 2.71828183e+00, 7.38905610e+00, 2.00855369e+01, 5.45981500e+01, 1.48413159e+02, 4.03428793e+02, 1.09663316e+03, 2.98095799e+03, 8.10308393e+03, 2.20264658e+04])  Binary Function a = np.random.random(10) a array([0.66448087, 0.91824602, 0.12914791, 0.89981498, 0.0213797 , 0.80503991, 0.0320084 , 0.88814445, 0.</description>
    </item>
    
    <item>
      <title>Using Array And Scalars</title>
      <link>https://mmblack4.github.io/mynotes/python/numpy/using-arrays-and-scalars/</link>
      <pubDate>Wed, 12 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mmblack4.github.io/mynotes/python/numpy/using-arrays-and-scalars/</guid>
      <description>import numpy as np# creating an array arr1 = np.array([(1, 2, 3, 4), (8, 9, 10, 11)]) arr1 array([[ 1, 2, 3, 4], [ 8, 9, 10, 11]])  # multiplication arr1 * arr1 array([[ 1, 4, 9, 16], [ 64, 81, 100, 121]])  # substraction arr1 - arr1 array([[0, 0, 0, 0], [0, 0, 0, 0]])  # division 1 / arr1 array([[1. , 0.5 , 0.33333333, 0.25 ], [0.</description>
    </item>
    
    <item>
      <title>Creating Arrays</title>
      <link>https://mmblack4.github.io/mynotes/python/numpy/numpy-arrays/</link>
      <pubDate>Sun, 09 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mmblack4.github.io/mynotes/python/numpy/numpy-arrays/</guid>
      <description>import numpy as np 1D array # 1D array a = np.array([1, 2, 3]) a array([1, 2, 3])  a.shape (3,)  2D array # 2D array b = np.array([(1.5, 2, 3), (4, 5, 6)]) b array([[1.5, 2. , 3. ], [4. , 5. , 6. ]])  b.shape (2, 3)  3D array c = np.array([ [(1.5, 2, 3), (4, 5, 6)], [(3, 2, 1), (4, 5, 6)] ]) c array([[[1.</description>
    </item>
    
    <item>
      <title>Data Types</title>
      <link>https://mmblack4.github.io/mynotes/python/numpy/data-types/</link>
      <pubDate>Sun, 09 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mmblack4.github.io/mynotes/python/numpy/data-types/</guid>
      <description> import numpy as np Signed 64-bit integer types np.int64 int  np.full((3, 3), 4.001, dtype=np.int64) array([[4, 4, 4], [4, 4, 4], [4, 4, 4]])  Standard double-precision floating point np.float32 numpy.float32  np.full((3, 3), 4.032, dtype=np.float32) array([[4.032, 4.032, 4.032], [4.032, 4.032, 4.032], [4.032, 4.032, 4.032]], dtype=float32)  Compllex numbers represented by 128 floats np.complex complex  Boolean type storing TRUE and FALSE values np.bool bool  np.eye(3, dtype=np.bool) array([[ True, False, False], [False, True, False], [False, False, True]])  </description>
    </item>
    
    <item>
      <title>Initial Placeholders</title>
      <link>https://mmblack4.github.io/mynotes/python/numpy/initial-placeholders/</link>
      <pubDate>Sun, 09 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mmblack4.github.io/mynotes/python/numpy/initial-placeholders/</guid>
      <description>import numpy as np Create an array of Zeros np.zeros((3,4)) # 3x4 array([[0., 0., 0., 0.], [0., 0., 0., 0.], [0., 0., 0., 0.]])  Create an array of ones np.ones((2,3,4),dtype=np.int16) #2x3x4 array([[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]], dtype=int16)  Create an array of evenly # array range 10 to 25 np.</description>
    </item>
    
    <item>
      <title>Inspecting Your Array</title>
      <link>https://mmblack4.github.io/mynotes/python/numpy/inspecting-your-array/</link>
      <pubDate>Sun, 09 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mmblack4.github.io/mynotes/python/numpy/inspecting-your-array/</guid>
      <description>import numpy as np# sample array data = np.full((3, 4), 4) data array([[4, 4, 4, 4], [4, 4, 4, 4], [4, 4, 4, 4]])  Array dimensions data.shape #3x4 (3, 4)  Length of array len(data) # 3 row 3  Number of array dimensions data.ndim # 2D array 2  Number of array elements data.size # 3x4 = 12 12  Data type of array elements data.dtype # return object dtype(&#39;int64&#39;)  Name of data type data.</description>
    </item>
    
    <item>
      <title>Loading Data From The Web</title>
      <link>https://mmblack4.github.io/mynotes/python/pandas/loading-data-from-the-web/</link>
      <pubDate>Mon, 27 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mmblack4.github.io/mynotes/python/pandas/loading-data-from-the-web/</guid>
      <description>Data from the web can also be easily read with pandas. to demonstrate this, we will perform a simple load of actual stock data
import pandas_datareader.data as web from datetime import date from dateutil.relativedelta import relativedelta  # read the last three months of data for GOOG goog = web.DataReader(&#39;GOOG&#39;, &amp;quot;yahoo&amp;quot;, date.today() + relativedelta(months=-3))  goog.head()   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .</description>
    </item>
    
    <item>
      <title>Create Table And Insert Data</title>
      <link>https://mmblack4.github.io/mynotes/python/sqlalchemy/note1/</link>
      <pubDate>Sun, 26 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mmblack4.github.io/mynotes/python/sqlalchemy/note1/</guid>
      <description>import sqlalchemy from sqlalchemy import create_engine from sqlalchemy import Column, Integer, String from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmakerengine = create_engine(&amp;#39;sqlite:///data.db&amp;#39;, echo=True) Base = declarative_base() Session = sessionmaker(bind=engine) session = Session()class Country(Base): __tablename__ = &amp;#39;country&amp;#39; id = Column(Integer, primary_key=True) name = Column(String) capital = Column(String) population = Column(Integer) def __init__(self, id, name, capital, population): self.id = id self.name = name self.capital = capital self.population = population def json(self): return { &amp;#39;id&amp;#39;: self.</description>
    </item>
    
    <item>
      <title>File System Methods</title>
      <link>https://mmblack4.github.io/mynotes/python/basics/file-system-methods/</link>
      <pubDate>Sat, 25 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mmblack4.github.io/mynotes/python/basics/file-system-methods/</guid>
      <description>import os Get Info
# get the current working directory path as a string (pwd - linux, windows) os.getcwd()  &#39;/home/mmblack/Documents/project/mynotes/content/python/basics&#39;  # get the contents of the current working directory as a list of strings(ls -linux, dir - windows) os.listdir() [&#39;simple-python.md&#39;, &#39;rock-paper-scissor.md&#39;, &#39;Find-you-IP-id-and-name.ipynb&#39;, &#39;auto-search.ipynb&#39;, &#39;template-simple-add.md&#39;, &#39;auto-search.md&#39;, &#39;break-with-youtube-song.ipynb&#39;, &#39;caesar-cipher.md&#39;, &#39;template-simple-add.ipynb&#39;, &#39;template-Copy1.md&#39;, &#39;mult.md&#39;, &#39;Find-you-IP-id-and-name.md&#39;, &#39;.ipynb_checkpoints&#39;, &#39;simple-python.ipynb&#39;, &#39;template.ipynb&#39;, &#39;template.md&#39;, &#39;caesar-cipher.ipynb&#39;, &#39;mult.ipynb&#39;, &#39;File-System-Methods.ipynb&#39;, &#39;break-with-youtube-song.md&#39;, &#39;rock-paper-scissor.ipynb&#39;]  # returns a generator with name and path info for directories and  # files in the the current directory and all subdirectoriesâ€” no exact short CLI equivalent,  # but ls -R provides subdirectory names and the names of files within subdirectories path = &amp;#39;/home/mmblack/Documents/project/mynotes/content/&amp;#39; for root, dirs, files in os.</description>
    </item>
    
    <item>
      <title>Add</title>
      <link>https://mmblack4.github.io/mynotes/python/basics/template-simple-add/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mmblack4.github.io/mynotes/python/basics/template-simple-add/</guid>
      <description>a = 10 b = 20c = a + bprint(c) 30  </description>
    </item>
    
    <item>
      <title>Auto Search</title>
      <link>https://mmblack4.github.io/mynotes/python/basics/auto-search/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mmblack4.github.io/mynotes/python/basics/auto-search/</guid>
      <description>import webbrowser import timesearch_topic = [ &amp;#34;python basics&amp;#34;, &amp;#34;python interview questions&amp;#34;, &amp;#34;top analyze api&amp;#34;, &amp;#34;how to create api in flask&amp;#34; ]def search(): for topic in search_topic: webbrowser.open_new_tab(&amp;#39;http://www.google.com/search?btnG=1&amp;amp;q=%s&amp;#39; %topic) time.</description>
    </item>
    
    <item>
      <title>Break with youtube song</title>
      <link>https://mmblack4.github.io/mynotes/python/basics/break-with-youtube-song/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mmblack4.github.io/mynotes/python/basics/break-with-youtube-song/</guid>
      <description>import webbrowser import timesong_list =[ &amp;#34;https://www.youtube.com/watch?v=kJQP7kiw5Fk&amp;#34;, &amp;#34;https://www.youtube.com/watch?v=euCqAq6BRa4&amp;#34;, &amp;#34;https://www.youtube.com/watch?v=UtF6Jej8yb4&amp;#34;, &amp;#34;https://www.youtube.com/watch?v=nYh-n7EOtMA&amp;#34;, &amp;#34;https://www.youtube.com/watch?v=J1OsKJW51HY&amp;#34;, ]def break_timer(interval): for i in song_list: time.sleep(interval) print(&amp;#39;time to take brake&amp;#39;) webbrowser.open(i) break_timer(5) time to take brake time to take brake time to take brake  </description>
    </item>
    
    <item>
      <title>Caesar Cipher</title>
      <link>https://mmblack4.github.io/mynotes/python/basics/caesar-cipher/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mmblack4.github.io/mynotes/python/basics/caesar-cipher/</guid>
      <description>Caesar Cipher: The Caesar cipher is one of the earliest known and simplest ciphers. It is a type of substitution cipher in which each letter in the plaintext is &amp;lsquo;shifted&amp;rsquo; a certain number of places down the alphabet. For example, with a shift of 1, A would be replaced by B, B would become C, and so on. The method is named after Julius Caesar, who apparently used it to communicate with his generals.</description>
    </item>
    
    <item>
      <title>DataFrame object</title>
      <link>https://mmblack4.github.io/mynotes/python/pandas/dataframe_object/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mmblack4.github.io/mynotes/python/pandas/dataframe_object/</guid>
      <description>The pandas DataFrame object a pandas series represents a single array of values, with an index label for each value.if you want to have more than one series of data that is aligned by a common index, then a Pandas DataFrame is used.
import pandas as pd from pandas import DataFrame, Seriesdates = pd.date_range(&amp;#39;2019-05-18&amp;#39;, &amp;#39;2019-05-25&amp;#39;) temp_chennai = Series([36, 37, 36, 37, 37, 37, 37, 37], index = dates) temp_delhi = Series([34, 39, 41, 41, 41, 41, 41, 42], index = dates)# create a DataFrame from the two Series objects temp_chennai and temp_delhi # and give them column names temps_df = DataFrame({ &amp;#34;chennai&amp;#34; : temp_chennai, &amp;#34;Delhi&amp;#34; : temp_delhi }) temps_df  .</description>
    </item>
    
    <item>
      <title>Find My IP-id and name</title>
      <link>https://mmblack4.github.io/mynotes/python/basics/find-you-ip-id-and-name/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mmblack4.github.io/mynotes/python/basics/find-you-ip-id-and-name/</guid>
      <description>import sockethostname = socket.gethostname() ipaddr = socket.gethostbyname(hostname)print(&amp;#39;your computer name:&amp;#39;,hostname) print(&amp;#39;your computer IP:&amp;#39;,ipaddr) your computer name: mmblack your computer IP: 127.0.1.1  </description>
    </item>
    
    <item>
      <title>Loading CSV Data From Files</title>
      <link>https://mmblack4.github.io/mynotes/python/pandas/loading_data_from_files/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mmblack4.github.io/mynotes/python/pandas/loading_data_from_files/</guid>
      <description>Loading CSV data from files The pandas livrary provides built-in support for loading data in .csv format
import pandas as pddf = pd.read_csv(&amp;#39;data/weather.csv&amp;#39;) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    MinTemp MaxTemp Rainfall Evaporation Sunshine WindGustDir WindGustSpeed WindDir9am WindDir3pm WindSpeed9am ... Humidity3pm Pressure9am Pressure3pm Cloud9am Cloud3pm Temp9am Temp3pm RainToday RISK_MM RainTomorrow     0 8.</description>
    </item>
    
    <item>
      <title>Multiplication</title>
      <link>https://mmblack4.github.io/mynotes/python/basics/mult/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mmblack4.github.io/mynotes/python/basics/mult/</guid>
      <description>a = 29 b = 4c = a * b print(c) 116  </description>
    </item>
    
    <item>
      <title>Network Fundamentals</title>
      <link>https://mmblack4.github.io/mynotes/python/network/network-fundamentals/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mmblack4.github.io/mynotes/python/network/network-fundamentals/</guid>
      <description>The Problem * Communication between computers * It&#39;s just sending/receiving bits  Two Min Issues * Addressing * Specifying a remote computer and service * Data transport * Moving bits back and forth  Network Addressing * Machines have a hostname and IP address * Programs/services have port number  Standard Ports * Ports for common services are Pressigned 21 FTP 22 SSH 23 Telnet 25 SMTP (Mail) 80 HTTP (Web) 110 POP3 (Mail) 119 NNTP (News) 443 HTTPs (web) * Other port numbers may just be randomly assigned to programs by the operation system  Using netstart * Use &#39;netstart&#39; to view active network connections sheel: newstart -a * Note: Must execute from the command shell on both Unix and Windows  Connections * Each endpoint of network connection is always represented by a host and post # * In python you write it out as a tuple (host, post)  Client/Server concept * Each endpoint is a running program * servers wait for incoming connections and provide a service (e.</description>
    </item>
    
    <item>
      <title>Rock Paper Scissor</title>
      <link>https://mmblack4.github.io/mynotes/python/basics/rock-paper-scissor/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mmblack4.github.io/mynotes/python/basics/rock-paper-scissor/</guid>
      <description>import random chose = [&amp;#34;rock&amp;#34;,&amp;#34;paper&amp;#34;,&amp;#34;scissor&amp;#34;]def play(youChose): computerChose = random.choice(chose) print(&amp;#39;you:&amp;#39;,youChose,&amp;#39;,computer:&amp;#39;,computerChose) if youChose == computerChose: return &amp;#39;Draw&amp;#39; elif youChose == &amp;#39;rock&amp;#39; and computerChose == &amp;#39;paper&amp;#39;: return &amp;#34;computer won&amp;#34; elif youChose == &amp;#39;rock&amp;#39; and computerChose == &amp;#39;scissor&amp;#39;: return &amp;#34;you won&amp;#34; elif youChose == &amp;#39;paper&amp;#39; and computerChose == &amp;#39;rock&amp;#39;: return &amp;#39;you won&amp;#39; elif youChose == &amp;#39;paper&amp;#39; and computerChose == &amp;#39;scissor&amp;#39;: return &amp;#39;computer won&amp;#39; elif youChose == &amp;#39;scissor&amp;#39; and computerChose == &amp;#39;rock&amp;#39;: return &amp;#39;computer won&amp;#39; elif youChose == &amp;#39;scissor&amp;#39; and computerChose == &amp;#39;paper&amp;#39;: return &amp;#39;you won&amp;#39;play(&amp;#39;rock&amp;#39;) you: rock ,computer: paper &#39;computer won&#39;  play(&amp;#39;paper&amp;#39;) you: paper ,computer: scissor &#39;computer won&#39;  play(&amp;#39;scissor&amp;#39;) you: scissor ,computer: paper &#39;you won&#39;  play(&amp;#39;scissor&amp;#39;) you: scissor ,computer: paper &#39;you won&#39;  play(&amp;#39;rock&amp;#39;) you: rock ,computer: scissor &#39;you won&#39;  play(&amp;#39;rock&amp;#39;) you: rock ,computer: rock &#39;Draw&#39;  </description>
    </item>
    
    <item>
      <title>Series Object</title>
      <link>https://mmblack4.github.io/mynotes/python/pandas/series_object/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mmblack4.github.io/mynotes/python/pandas/series_object/</guid>
      <description>The pandas series object the base data structure of pandas is the sereis object,which is designed to operate similar to a numpy array but also add index capablilities import pandas as pd from pandas import Seriess = Series([1, 2, 3, 4]) #create a four item ss[[1, 3]] #return a series with the rows with labels 1 and 3 1 2 3 4 dtype: int64  s = Series([1, 2, 3, 4], index = [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;]) #create a item with index s a 1 b 2 c 3 d 4 dtype: int64  s[[&amp;#39;a&amp;#39;, &amp;#39;d&amp;#39;]] a 1 d 4 dtype: int64  s.</description>
    </item>
    
    <item>
      <title>Server Implementation</title>
      <link>https://mmblack4.github.io/mynotes/python/network/server-implementation/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mmblack4.github.io/mynotes/python/network/server-implementation/</guid>
      <description>Network server are a bit more tricky must listen for incoming connections on a well-know port number Tyically run foreve in a server-loop May have to service multiple clients  TCP Server from socket import * s = socket(AF_INET, SOCK_STREAM) s.bind((&amp;#34;127.0.0.1&amp;#34;, 9000)) # binds the socket to a specific address s.listen(5) #Tells operating system to start listening for connections on the socket while True: clientsocket, address = s.accept() #Accept a new client connection # clientsocket - This is a new socket that&amp;#39;s used for data # address - This is the network/port address of the client that connected print(&amp;#34;connection from {address}&amp;#34;) clientsocket.</description>
    </item>
    
    <item>
      <title>Simple Python</title>
      <link>https://mmblack4.github.io/mynotes/python/basics/simple-python/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mmblack4.github.io/mynotes/python/basics/simple-python/</guid>
      <description>print(&amp;#39;Hello Toronto&amp;#39;) Hello Toronto  print(2) 2  </description>
    </item>
    
    <item>
      <title>Template</title>
      <link>https://mmblack4.github.io/mynotes/python/network/template/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mmblack4.github.io/mynotes/python/network/template/</guid>
      <description>print(&amp;#39;Hello Toronto&amp;#39;) Hello Toronto  print(2) 2  </description>
    </item>
    
    <item>
      <title>Template</title>
      <link>https://mmblack4.github.io/mynotes/python/numpy/template/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mmblack4.github.io/mynotes/python/numpy/template/</guid>
      <description>print(&amp;#39;Hello Toronto&amp;#39;) Hello Toronto  print(2) 2  </description>
    </item>
    
    <item>
      <title>Template</title>
      <link>https://mmblack4.github.io/mynotes/python/basics/template/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mmblack4.github.io/mynotes/python/basics/template/</guid>
      <description>print(&amp;#39;Hello Toronto&amp;#39;) Hello Toronto  print(2) 2  </description>
    </item>
    
    <item>
      <title>Template</title>
      <link>https://mmblack4.github.io/mynotes/python/pandas/template/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mmblack4.github.io/mynotes/python/pandas/template/</guid>
      <description>print(&amp;#39;Hello Toronto&amp;#39;) Hello Toronto  print(2) 2  </description>
    </item>
    
    <item>
      <title>Zero</title>
      <link>https://mmblack4.github.io/mynotes/python/pandas/zero/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mmblack4.github.io/mynotes/python/pandas/zero/</guid>
      <description>import numpy as np import pandas as pddtype = [(&amp;#39;Col1&amp;#39;,&amp;#39;int32&amp;#39;), (&amp;#39;Col2&amp;#39;,&amp;#39;float32&amp;#39;), (&amp;#39;Col3&amp;#39;,&amp;#39;float32&amp;#39;)] values = np.zeros(20, dtype=dtype) index = [&amp;#39;Row&amp;#39;+str(i) for i in range(1, len(values)+1)]df = pd.DataFrame(values, index=index) print(df)  Col1 Col2 Col3 Row1 0 0.0 0.0 Row2 0 0.0 0.0 Row3 0 0.0 0.0 Row4 0 0.0 0.0 Row5 0 0.0 0.0 Row6 0 0.0 0.0 Row7 0 0.0 0.0 Row8 0 0.0 0.0 Row9 0 0.0 0.0 Row10 0 0.</description>
    </item>
    
  </channel>
</rss>